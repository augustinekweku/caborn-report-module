export interface ApiResponse<T> {
  message: string;
  code: string;
  data: T;
}

// Generated by https://quicktype.io

export interface AxiosErrorResponse {
  message: string;
  name: string;
  stack: string;
  request: Request;
  config: Config;
  response: Response;
  code: string; // Generated by https://quicktype.io
}

export interface Request {
  data: Data;
  status: number;
  statusText: string;
  headers: RequestHeaders;
  config: Config;
  request: PurpleRequest;
}

export interface Config {
  transitional: Transitional;
  adapter: string[];
  transformRequest: null[];
  transformResponse: null[];
  timeout: number;
  xsrfCookieName: string;
  xsrfHeaderName: string;
  maxContentLength: number;
  maxBodyLength: number;
  env: PurpleRequest;
  headers: ConfigHeaders;
  withCredentials: boolean;
  method: string;
  url: string;
  data: string;
}

export interface PurpleRequest {}

export interface ConfigHeaders {
  Accept: string;
  "Content-Type": string;
}

export interface Transitional {
  silentJSONParsing: boolean;
  forcedJSONParsing: boolean;
  clarifyTimeoutError: boolean;
}

export interface Data {
  error: string;
  message: string;
  code: string;
  data: PurpleRequest;
}

export interface RequestHeaders {
  "cache-control": string;
  "content-length": string;
  "content-type": string;
}

status: number;

export interface Config {
  transitional: Transitional;
  adapter: string[];
  transformRequest: null[];
  transformResponse: null[];
  timeout: number;
  xsrfCookieName: string;
  xsrfHeaderName: string;
  maxContentLength: number;
  maxBodyLength: number;
  env: Env;
  headers: Headers;
  withCredentials: boolean;
  method: string;
  url: string;
  data: string;
}

export interface Env {}

export interface Headers {
  Accept: string;
  "Content-Type": string;
}

export interface Transitional {
  silentJSONParsing: boolean;
  forcedJSONParsing: boolean;
  clarifyTimeoutError: boolean;
}

// Generated by https://quicktype.io

export interface Response {
  data: Data;
  status: number;
  statusText: string;
  headers: ResponseHeaders;
  config: Config;
  request: Request;
}

export interface Config {
  transitional: Transitional;
  adapter: string[];
  transformRequest: null[];
  transformResponse: null[];
  timeout: number;
  xsrfCookieName: string;
  xsrfHeaderName: string;
  maxContentLength: number;
  maxBodyLength: number;
  env: Request;
  headers: ConfigHeaders;
  withCredentials: boolean;
  method: string;
  url: string;
  data: string;
}

export interface Request {}

export interface ConfigHeaders {
  Accept: string;
  "Content-Type": string;
}

export interface Transitional {
  silentJSONParsing: boolean;
  forcedJSONParsing: boolean;
  clarifyTimeoutError: boolean;
}

export interface Data {
  message: string;
  code: string;
  data: Request;
}

export interface ResponseHeaders {
  "cache-control": string;
  "content-length": string;
  "content-type": string;
}

export interface DataTableColumnType {
  field: string;
  label: string;
  width?: number;
  valueGetter?: (params: any) => any;
}
